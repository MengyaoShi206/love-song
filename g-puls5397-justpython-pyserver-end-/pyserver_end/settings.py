"""
Django settings for pyserver_end project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import configparser
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 读取配置文件
config = configparser.ConfigParser()
config_path = os.path.join(BASE_DIR, 'config.ini')

# 如果配置文件存在，则读取配置
if os.path.exists(config_path):
    config.read(config_path, encoding='utf-8')
else:
    # 如果配置文件不存在，使用默认配置
    config['database'] = {'type': 'sqlite'}
    config['sqlite'] = {'name': 'db.sqlite3'}
    config['rabbitmq'] = {
        'host': 'localhost',
        'port': '5672',
        'user': 'guest',
        'password': 'guest',
        'virtual_host': '/'
    }
    config['elasticsearch'] = {
        'host': 'localhost',
        'port': '9200',
        'user': '',
        'password': '',
        'index_prefix': 'pyserver_'
    }
    config['clickhouse'] = {
        'host': 'localhost',
        'port': '9000',
        'user': 'default',
        'password': '',
        'database': 'pyserver'
    }

# 获取数据库类型
DB_TYPE = config.get('database', 'type', fallback='sqlite')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-pui&ok8fs#d9g5xn^4+753&x5$nm_9)w9q&j^4*)-mss8@$p7("

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",  # 注释掉CSRF中间件，允许跨域请求
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pyserver_end.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pyserver_end.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 根据配置选择数据库类型
if DB_TYPE == 'sqlite':
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / config.get('sqlite', 'name', fallback='db.sqlite3'),
        }
    }
else:  # 使用分布式存储方案
    # 默认仍使用SQLite作为Django的主数据库
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / config.get('sqlite', 'name', fallback='db.sqlite3'),
        }
    }
    
    # RabbitMQ配置（临时存储）
    RABBITMQ = {
        'HOST': config.get('rabbitmq', 'host', fallback='localhost'),
        'PORT': config.getint('rabbitmq', 'port', fallback=5672),
        'USER': config.get('rabbitmq', 'user', fallback='guest'),
        'PASSWORD': config.get('rabbitmq', 'password', fallback='guest'),
        'VIRTUAL_HOST': config.get('rabbitmq', 'virtual_host', fallback='/'),
    }
    
    # Elasticsearch配置（缓存）
    ELASTICSEARCH = {
        'HOST': config.get('elasticsearch', 'host', fallback='localhost'),
        'PORT': config.getint('elasticsearch', 'port', fallback=9200),
        'USER': config.get('elasticsearch', 'user', fallback=''),
        'PASSWORD': config.get('elasticsearch', 'password', fallback=''),
        'INDEX_PREFIX': config.get('elasticsearch', 'index_prefix', fallback='pyserver_'),
    }
    
    # ClickHouse配置（长期存储）
    CLICKHOUSE = {
        'HOST': config.get('clickhouse', 'host', fallback='localhost'),
        'PORT': config.getint('clickhouse', 'port', fallback=9000),
        'USER': config.get('clickhouse', 'user', fallback='default'),
        'PASSWORD': config.get('clickhouse', 'password', fallback=''),
        'DATABASE': config.get('clickhouse', 'database', fallback='pyserver'),
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# 指定自定义用户模型
AUTH_USER_MODEL = 'api.User'
